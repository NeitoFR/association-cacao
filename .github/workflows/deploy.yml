name: CD

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  deploy:
    runs-on: self-hosted # Run this job on your self-hosted runner
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Ensure full git history is fetched, including tags

      - name: Set GitHub user
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "actions@github.com"

      # Step to pull the latest Docker image matching the tag and deploy with Helm
      - name: Deploy to Kubernetes using Helm
        env:
          APP_KEYS: ${{ secrets.APP_KEYS }}
          API_TOKEN_SALT: ${{ secrets.API_TOKEN_SALT }}
          ADMIN_JWT_SECRET: ${{ secrets.ADMIN_JWT_SECRET }}
          TRANSFER_TOKEN_SALT: ${{ secrets.TRANSFER_TOKEN_SALT }}
          DB_HOST: ${{ vars.DB_HOST }}
          DB_PORT: ${{ vars.DB_PORT }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          STRAPI_URL: ${{ vars.STRAPI_URL }}
          STRAPI_API_TOKEN: ${{ secrets.STRAPI_API_TOKEN }}
          DB_USER: ${{ vars.DB_USER }}
          DBS_TO_BACKUP: ${{ vars.DBS_TO_BACKUP }}
          ENCRPYPTION_KEY: ${{ secrets.ENCRPYPTION_KEY }}
          S3_URL: ${{ vars.S3_URL }}
          S3_BUCKET: ${{ vars.S3_BUCKET }}
          S3_ACCESS_KEY: ${{ secrets.S3_ACCESS_KEY }}
          S3_SECRET_KEY: ${{ secrets.S3_SECRET_KEY }}
          S3_REGION: ${{ vars.S3_REGION }}
        run: |
          # Fetch last tag
          TAG=$(git describe --tags --abbrev=0)
          echo "Deploying version $TAG"

          # Perform Helm upgrade (or install if it doesn't exist)
          helm upgrade --install cacao ./ops/helm \
            --namespace cacao --create-namespace \
            --set imagesConfiguration.global.tag="$TAG" \
            --set deployments.strapi.config.APP_KEYS="$APP_KEYS" \
            --set deployments.strapi.config.API_TOKEN_SALT="$API_TOKEN_SALT" \
            --set deployments.strapi.config.ADMIN_JWT_SECRET="$ADMIN_JWT_SECRET" \
            --set deployments.strapi.config.TRANSFER_TOKEN_SALT="$TRANSFER_TOKEN_SALT" \
            --set deployments.strapi.config.DB_HOST="$DB_HOST" \
            --set deployments.strapi.config.DB_PORT="$DB_PORT" \
            --set deployments.strapi.config.DB_NAME="$DB_NAME" \
            --set deployments.strapi.config.DB_PASSWORD="$DB_PASSWORD" \
            --set deployments.strapi.config.JWT_SECRET="$JWT_SECRET" \
            --set deployments.front.config.STRAPI_URL="$STRAPI_URL" \
            --set deployments.front.config.STRAPI_API_TOKEN="$STRAPI_API_TOKEN" \
            --set pgbackup.config.DB_HOST=$DB_HOST \
            --set pgbackup.config.DB_PORT=$DB_PORT \
            --set pgbackup.config.DB_USER=$DB_BACKUP_USER \
            --set pgbackup.config.DB_PASSWORD=$DB_BACKUP_USER_PASSWORD \
            --set pgbackup.config.DBS_TO_BACKUP=$DBS_TO_BACKUP \
            --set pgbackup.config.ENCRPYPTION_KEY=$ENCRPYPTION_KEY \
            --set pgbackup.config.S3_URL=$S3_URL \
            --set pgbackup.config.S3_BUCKET=$S3_BUCKET \
            --set pgbackup.config.S3_ACCESS_KEY=$S3_ACCESS_KEY \
            --set pgbackup.config.S3_SECRET_KEY=$S3_SECRET_KEY \
            --set pgbackup.config.S3_REGION=$S3_REGION
