name: CD

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed

jobs:
  deploy:
    runs-on: self-hosted # Run this job on your self-hosted runner
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Ensure full git history is fetched, including tags

      - name: Set GitHub user
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "actions@github.com"

      - name: Create values file
        run: |
          TAG=$(git describe --tags --abbrev=0)
          cat <<EOF > values.yaml
          imagesConfiguration:
            global:
              tag: "$TAG"
          deployments:
            strapi:
              config:
                APP_KEYS: "${{ secrets.APP_KEYS }}"
                API_TOKEN_SALT: "${{ secrets.API_TOKEN_SALT }}"
                ADMIN_JWT_SECRET: "${{ secrets.ADMIN_JWT_SECRET }}"
                TRANSFER_TOKEN_SALT: "${{ secrets.TRANSFER_TOKEN_SALT }}"
                DB_HOST: "${{ vars.DB_HOST }}"
                DB_PORT: "${{ vars.DB_PORT }}"
                DB_NAME: "${{ vars.DB_NAME }}"
                DB_USER: "${{ vars.DB_USER }}"
                DB_PASSWORD: "${{ secrets.DB_PASSWORD }}"
                JWT_SECRET: "${{ secrets.JWT_SECRET }}"
            front:
              config:
                STRAPI_URL: "${{ vars.STRAPI_URL }}"
                STRAPI_API_TOKEN: "${{ secrets.STRAPI_API_TOKEN }}"
          pgbackup:
            config:
              DB_HOST: "${{ vars.DB_HOST }}"
              DB_PORT: "${{ vars.DB_PORT }}"
              DB_USER: "${{ vars.DB_BACKUP_USER }}"
              DB_PASSWORD: "${{ secrets.DB_BACKUP_USER_PASSWORD }}"
              DBS_TO_BACKUP: "${{ vars.DBS_TO_BACKUP }}"
              ENCRPYPTION_KEY: "${{ secrets.ENCRPYPTION_KEY }}"
              S3_URL: "${{ vars.S3_URL }}"
              S3_BUCKET: "${{ vars.S3_BUCKET }}"
              S3_ACCESS_KEY: "${{ secrets.S3_ACCESS_KEY }}"
              S3_SECRET_KEY: "${{ secrets.S3_SECRET_KEY }}"
              S3_REGION: "${{ vars.S3_REGION }}"
          EOF

      # Step to pull the latest Docker image matching the tag and deploy with Helm
      - name: Deploy to Kubernetes using Helm
        run: |
          echo "Deploying version $TAG"
          helm upgrade --install cacao ./ops/helm \
            --namespace cacao --create-namespace \
            -f values.yaml
