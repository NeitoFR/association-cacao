{{- if .Values.pgbackup.enabled -}}
{{- $name := "db-backup" -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "cacao.fullname" . }}-{{ $name }}-script
  namespace: {{ include "cacao.namespace" . }}
  labels:
    {{- (include "cacao.commonLabels" .) | nindent 4 }}
    app.kubernetes.io/name: {{ $name }}
data:
  backup.sh: |
    #!/bin/sh
    set -e

    echo "Starting database backup..."

    # Define variables
    TIMESTAMP=$(date +"%F")
    BACKUP_DIR="/$TIMESTAMP"
    DBS_TO_BACKUP=$(echo $DBS_TO_BACKUP | tr ',' ' ')

    # Create backup directory if it doesn't exist
    mkdir -p $BACKUP_DIR

    # Loop through each database and perform the backup
    for DB_NAME in $DBS_TO_BACKUP; do
        BACKUP_FILE="$BACKUP_DIR/$DB_NAME.sql"
        ENCRYPTED_BACKUP_FILE="$BACKUP_FILE.gpg"
        
        echo "Backing up database: $DB_NAME"
        if PGPASSWORD=$DB_PASSWORD pg_dump -U $DB_USER -h $DB_HOST -p $DB_PORT \
            --no-owner --no-privileges --no-comments \
            $DB_NAME > $BACKUP_FILE 2>/tmp/pg_dump_error; then
            echo "Database backup completed successfully"
        else
            echo "Error during backup of $DB_NAME:"
            cat /tmp/pg_dump_error
            exit 1
        fi
        
        echo "Encrypting backup file: $BACKUP_FILE"
        gpg --batch --yes --passphrase $ENCRPYPTION_KEY --symmetric --cipher-algo AES256 -o $ENCRYPTED_BACKUP_FILE $BACKUP_FILE
        
        # Remove the unencrypted backup file
        rm $BACKUP_FILE
    done

    echo "Uploading backup directory to S3..."
    s3cmd put --recursive $BACKUP_DIR s3://$S3_BUCKET/
{{- end -}}